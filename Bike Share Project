import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input('Please select a city: Chicago, New York City, or Washington:\n').lower()
        if city not in ('chicago', 'new york city', 'washington'):
            print('I\'m sorry that is not specified city. Please select a specified city.')
        else:
            break

    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
        month = input('Please select a month from January to June, or all to see all data:\n').lower()
        if month not in ('january', 'february', 'march', 'april', 'may', 'june', 'all'):
            print('I\'m sorry data for that month is not yet available. Please select a month in range.')
        else:
            break
                  
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('Please select a day of the week or all to see all data:\n').lower()
        if day not in ('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'all'):
            print('Please select a valid day of the week.')
        else:
            break


    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    df['Start Time'] = pd.to_datetime(df['Start Time'])

    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    most_common_month = df['month'].mode()[0]
    print('The most common month is:\n', most_common_month)

    # TO DO: display the most common day of week
    most_common_day = df['day_of_week'].mode()[0]
    print('The most common day of the week is:\n', most_common_day)
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    most_common_hour = df['hour'].mode()[0]
    print('The most common hour of the day is:\n', most_common_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    most_common_ss = df['Start Station'].value_counts().idxmax()
    print('The most commonly used start station is:\n', most_common_ss)

    # TO DO: display most commonly used end station
    most_common_es = df['End Station'].value_counts().idxmax()
    print('The most commonly used end station is:\n', most_common_es)

    # TO DO: display most frequent combination of start station and end station trip
    most_common_combo = (df['Start Station'] + " " + df['End Station']).mode()[0]
    print('The most commonly used start and end station is:\n', most_common_combo)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    ttl_travel_time = df['Trip Duration'].sum()
    print('Total travel time for this city is:\n', ttl_travel_time)

    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('The average travel time is:\n', mean_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print('User types of this city:\n', user_types)

    # TO DO: Display counts of gender
    try:
        gender_types = df['Gender'].value_counts()
        print('Gender breakdown:\n', gender_types)
    except KeyError:
        print("Gender breakdown: Sorry, no data is available at this time.")


    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        earliest_yob = int(df['Birth Year'].min())
        print('The Earliest Birth Year:\n', earliest_yob)
    except KeyError:
        print('Earliest Year: Sorry, No data available for this month.')
    try:
        most_recent_yob = int(df['Birth Year'].max())
        print('The most recent birth year in this data:\n', most_recent_yob)
    except KeyError:
        print('Most Recent Year: Sorry, No data available for this month.')
    try:
        most_common_yob = int(df['Birth Year'].mode()[0])
        print('The most common Birth year in this data:\n', most_common_yob)
    except KeyError:
        print('Most Common Year of Birth: Sorry, No data avaiable for this month')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
    
def show_raw_data(df):
    prompt = input('Would you like to see  lines of the raw data?\n').lower()
    i = 0
    while True:
        if prompt == 'yes':
            print(df.iloc[i:i+5])
            i += 5 
            prompt = input('Would you like to see 5 more lines?\n').lower()
            if prompt == 'yes':
                continue
            else:
                    break
        else:
            break
            
            
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        show_raw_data(df)
        

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
